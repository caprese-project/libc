#ifndef CAPRESE_LIBC_CXX_BIT_
#define CAPRESE_LIBC_CXX_BIT_

#include <cstdint>

namespace std {
  template<typename To, typename From>
  [[nodiscard]] constexpr To bit_cast(const From& from) noexcept {
    static_assert(sizeof(To) == sizeof(From));
#if defined(__GNUC__)
    return __builtin_bit_cast(To, from);
#else  // ^^^ __GNUC__ ^^^ / vvv !__GNUC__ vvv
    To to;
    memcpy(&to, &from, sizeof(To));
    return to;
#endif // !__GNUC__
  };

  template<typename T>
  [[nodiscard]] constexpr T byteswap(T value) noexcept {
    if constexpr (sizeof(T) == 1) {
      return value;
    }
    if constexpr (sizeof(T) == 2) {
      return static_cast<T>((static_cast<uint16_t>(value) << 8) | (static_cast<uint16_t>(value) >> 8));
    }
    if constexpr (sizeof(T) == 4) {
      return static_cast<T>((static_cast<uint32_t>(value) << 24) | (static_cast<uint32_t>(value) >> 24) | ((static_cast<uint32_t>(value) & 0x00FF0000) << 8)
                            | ((static_cast<uint32_t>(value) & 0x0000FF00) >> 8));
    }
    if constexpr (sizeof(T) == 8) {
      return static_cast<T>((static_cast<uint64_t>(value) << 56) | (static_cast<uint64_t>(value) >> 56) | ((static_cast<uint64_t>(value) & 0x00FF000000000000) << 40)
                            | ((static_cast<uint64_t>(value) & 0x000000000000FF00) >> 40) | ((static_cast<uint64_t>(value) & 0x0000FF0000000000) << 24)
                            | ((static_cast<uint64_t>(value) & 0x0000000000FF0000) >> 24) | ((static_cast<uint64_t>(value) & 0x000000FF00000000) << 8)
                            | ((static_cast<uint64_t>(value) & 0x00000000FF000000) >> 8));
    }

    return value;
  }

  template<typename T>
  constexpr int countr_zero(T value) noexcept {
    if constexpr (sizeof(T) <= 4) {
      return __builtin_ctz(value);
    }
    if constexpr (sizeof(T) == 8) {
      return __builtin_ctzll(value);
    }
  }
} // namespace std

#endif // CAPRESE_LIBC_CXX_BIT_
