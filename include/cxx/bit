#ifndef CAPRESE_LIBC_CXX_BIT_
#define CAPRESE_LIBC_CXX_BIT_

#include <cstdint>

namespace std {
  template<typename To, typename From>
  [[nodiscard]] constexpr To bit_cast(const From& from) noexcept {
    static_assert(sizeof(To) == sizeof(From));
#if defined(__GNUC__)
    return __builtin_bit_cast(To, from);
#else  // ^^^ __GNUC__ ^^^ / vvv !__GNUC__ vvv
    To to;
    memcpy(&to, &from, sizeof(To));
    return to;
#endif // !__GNUC__
  };

  template<typename T>
  [[nodiscard]] constexpr T byteswap(T value) noexcept {
    if constexpr (sizeof(T) == 1) {
      return value;
    }
    if constexpr (sizeof(T) == 2) {
      return __builtin_bswap16(value);
    }
    if constexpr (sizeof(T) == 4) {
      return __builtin_bswap32(value);
    }
    if constexpr (sizeof(T) == 8) {
      return __builtin_bswap64(value);
    }

    return value;
  }

  template<typename T>
  constexpr int countr_zero(T value) noexcept {
    if constexpr (sizeof(T) <= 4) {
      return __builtin_ctz(value);
    }
    if constexpr (sizeof(T) == 8) {
      return __builtin_ctzll(value);
    }
  }
} // namespace std

#endif // CAPRESE_LIBC_CXX_BIT_
