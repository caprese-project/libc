#ifndef CAPRESE_LIBC_CXX_TYPE_TRAITS_
#define CAPRESE_LIBC_CXX_TYPE_TRAITS_

#include <internal/version.h>

#ifdef __CXX_STD_11__

#include <internal/cxx/type_traits/characteristic.h>
#include <internal/cxx/type_traits/constant.h>
#include <internal/cxx/type_traits/logic.h>
#include <internal/cxx/type_traits/modify.h>
#include <internal/cxx/type_traits/type.h>
#include <internal/cxx/type_traits/type_relation.h>

namespace std {
  template<typename T, T v>
  using integral_constant = __integral_constant<T, v>;
  using true_type         = __true_type;
  using false_type        = __false_type;

#ifdef __CXX_STD_17__
  template<bool v>
  using bool_constant = __bool_constant<v>;
#endif // __CXX_STD_17__

  template<typename T>
  using is_void = __is_void<T>;

#ifdef __CXX_STD_14__

  template<typename T>
  using is_null_pointer = __is_null_pointer<T>;

#endif // __CXX_STD_14__

  template<typename T>
  using is_integral = __is_integral<T>;

  template<typename T>
  using is_floating_point = __is_floating_point<T>;

  template<typename T>
  using is_array = __is_array<T>;

  template<typename T>
  using is_pointer = __is_pointer<T>;

  template<typename T>
  using is_lvalue_reference = __is_lvalue_reference<T>;

  template<typename T>
  using is_rvalue_reference = __is_rvalue_reference<T>;

  template<typename T>
  using is_member_object_pointer = __is_member_object_pointer<T>;

  template<typename T>
  using is_member_function_pointer = __is_member_function_pointer<T>;

  template<typename T>
  using is_enum = __is_enum_t<T>;

  template<typename T>
  using is_union = __is_union_t<T>;

  template<typename T>
  using is_class = __is_class_t<T>;

  template<typename T>
  using is_function = __is_function<T>;

  template<typename T>
  using is_reference = __is_reference<T>;

  template<typename T>
  using is_arithmetic = __is_arithmetic<T>;

  template<typename T>
  using is_fundamental = __is_fundamental<T>;

  template<typename T>
  using is_object = __is_object<T>;

  template<typename T>
  using is_scalar = __is_scalar<T>;

  template<typename T>
  using is_compound = __is_compound<T>;

  template<typename T>
  using is_member_pointer = __is_member_pointer<T>;

#ifdef __CXX_STD_23__

  template<typename T>
  using is_scoped_enum = __is_scoped_enum<T>;

#endif // __CXX_STD_23__

  template<typename T>
  using is_const = __is_const<T>;

  template<typename T>
  using is_volatile = __is_volatile<T>;

  template<typename T>
  using is_trivial = __is_trivial_t<T>;

  template<typename T>
  using is_trivial_copyable = __is_trivially_copyable_t<T>;

  template<typename T>
  using is_standard_layout = __is_standard_layout_t<T>;

  template<typename T>
  using is_empty = __is_empty_t<T>;

  template<typename T>
  using is_polymorphic = __is_polymorphic_t<T>;

  template<typename T>
  using is_abstract = __is_abstract_t<T>;

  template<typename T>
  using is_final = __is_final_t<T>;

  template<typename T>
  using is_aggregate = __is_aggregate_t<T>;

  template<typename T, typename U>
  using is_same = __is_same_t<T, U>;

  template<typename Base, typename Derived>
  using is_base_of = __is_base_of_t<Base, Derived>;

  template<typename From, typename To>
  using is_convertible = __is_convertible<From, To>;

  template<typename T>
  using remove_const = __remove_const<T>;

  template<typename T>
  using remove_volatile = __remove_volatile<T>;

  template<typename T>
  using remove_cv = __remove_cv<T>;

  template<typename T>
  using add_const = __add_const<T>;

  template<typename T>
  using add_volatile = __add_volatile<T>;

  template<typename T>
  using add_cv = __add_cv<T>;

  template<typename T>
  using remove_reference = __remove_reference<T>;

  template<typename T>
  using add_lvalue_reference = __add_lvalue_reference<T>;

  template<typename T>
  using add_rvalue_reference = __add_rvalue_reference<T>;

  template<typename... Tn>
  using void_t = __void_t<Tn...>;

  template<typename... Traits>
  using conjunction = __conjunction<Traits...>;

  template<typename... Traits>
  using disjunction = __disjunction<Traits...>;

  template<typename T>
  using negation = __negation<T>;

#ifdef __CXX_STD_17__

  template<typename T>
  inline constexpr bool is_void_v = is_void<T>::value;

  template<typename T>
  inline constexpr bool is_null_pointer_v = is_null_pointer<T>::value;

  template<typename T>
  inline constexpr bool is_integral_v = is_integral<T>::value;

  template<typename T>
  inline constexpr bool is_floating_point_v = is_floating_point<T>::value;

  template<typename T>
  inline constexpr bool is_array_v = is_array<T>::value;

  template<typename T>
  inline constexpr bool is_pointer_v = is_pointer<T>::value;

  template<typename T>
  inline constexpr bool is_lvalue_reference_v = is_lvalue_reference<T>::value;

  template<typename T>
  inline constexpr bool is_rvalue_reference_v = is_rvalue_reference<T>::value;

  template<typename T>
  inline constexpr bool is_member_object_pointer_v = is_member_object_pointer<T>::value;

  template<typename T>
  inline constexpr bool is_member_function_pointer_v = is_member_function_pointer<T>::value;

  template<typename T>
  inline constexpr bool is_enum_v = is_enum<T>::value;

  template<typename T>
  inline constexpr bool is_union_v = is_union<T>::value;

  template<typename T>
  inline constexpr bool is_class_v = is_class<T>::value;

  template<typename T>
  inline constexpr bool is_function_v = is_function<T>::value;

  template<typename T>
  inline constexpr bool is_reference_v = is_reference<T>::value;

  template<typename T>
  inline constexpr bool is_arithmetic_v = is_arithmetic<T>::value;

  template<typename T>
  inline constexpr bool is_fundamental_v = is_fundamental<T>::value;

  template<typename T>
  inline constexpr bool is_object_v = is_object<T>::value;

  template<typename T>
  inline constexpr bool is_scalar_v = is_scalar<T>::value;

  template<typename T>
  inline constexpr bool is_compound_v = is_compound<T>::value;

  template<typename T>
  inline constexpr bool is_member_pointer_v = is_member_pointer<T>::value;

#ifdef __CXX_STD_23__

  template<typename T>
  inline constexpr bool is_scoped_enum_v = is_scoped_enum<T>::value;

#endif // __CXX_STD_23__

  template<typename T>
  inline constexpr bool is_const_v = is_const<T>::value;

  template<typename T>
  inline constexpr bool is_volatile_v = is_volatile<T>::value;

  template<typename T>
  inline constexpr bool is_trivial_v = is_trivial<T>::value;

  template<typename T>
  inline constexpr bool is_trivial_copyable_v = is_trivial_copyable<T>::value;

  template<typename T>
  inline constexpr bool is_standard_layout_v = is_standard_layout<T>::value;

  template<typename T>
  inline constexpr bool is_empty_v = is_empty<T>::value;

  template<typename T>
  inline constexpr bool is_polymorphic_v = is_polymorphic<T>::value;

  template<typename T>
  inline constexpr bool is_abstract_v = is_abstract<T>::value;

  template<typename T>
  inline constexpr bool is_final_v = is_final<T>::value;

  template<typename T>
  inline constexpr bool is_aggregate_v = is_aggregate<T>::value;

  template<typename T, typename U>
  inline constexpr bool is_same_v = is_same<T, U>::value;

  template<typename Base, typename Derived>
  inline constexpr bool is_base_of_v = is_base_of<Base, Derived>::value;

  template<typename From, typename To>
  inline constexpr bool is_convertible_v = is_convertible<From, To>::value;

#endif // __CXX_STD_17__
} // namespace std

#endif // __CXX_STD_11__

#endif // CAPRESE_LIBC_CXX_TYPE_TRAITS_
