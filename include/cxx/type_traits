#ifndef CAPRESE_LIBC_CXX_TYPE_TRAITS_
#define CAPRESE_LIBC_CXX_TYPE_TRAITS_

namespace std {
  template<typename T, T _v>
  struct integral_constant {
    static constexpr T value = _v;
    using value_type         = T;
    using type               = integral_constant<T, _v>;

    constexpr operator value_type() const noexcept {
      return value;
    }

    constexpr value_type operator()() const noexcept {
      return value;
    }
  };

  using true_type  = integral_constant<bool, true>;
  using false_type = integral_constant<bool, false>;

  template<bool _v>
  using bool_constant = integral_constant<bool, _v>;

  template<typename T>
  struct is_trivial: public integral_constant<bool, __is_trivial(T)> { };

  template<typename T>
  struct is_standard_layout: public integral_constant<bool, __is_standard_layout(T)> { };

  template<typename T>
  struct remove_const {
    using type = T;
  };

  template<typename T>
  struct remove_const<const T> {
    using type = T;
  };

  template<typename T>
  struct remove_volatile {
    using type = T;
  };

  template<typename T>
  struct remove_volatile<volatile T> {
    using type = T;
  };

  template<typename T>
  struct remove_cv {
    using type = T;
  };

  template<typename T>
  struct remove_cv<const T> {
    using type = T;
  };

  template<typename T>
  struct remove_cv<volatile T> {
    using type = T;
  };

  template<typename T>
  struct remove_cv<const volatile T> {
    using type = T;
  };

  template<typename T>
  struct add_const {
    using type = const T;
  };

  template<typename T>
  struct add_volatile {
    using type = volatile T;
  };

  template<typename T>
  struct add_cv {
    using type = const volatile T;
  };

  template<typename T>
  struct remove_reference {
    using type = T;
  };

  template<typename T>
  struct remove_reference<T&> {
    using type = T;
  };

  template<typename T>
  struct remove_reference<T&&> {
    using type = T;
  };

  template<typename T>
  constexpr bool is_trivial_v = is_trivial<T>::value;

  template<typename T>
  constexpr bool is_standard_layout_v = is_standard_layout<T>::value;

  template<typename T>
  using remove_const_t = typename remove_const<T>::type;

  template<typename T>
  using remove_volatile_t = typename remove_volatile<T>::type;

  template<typename T>
  using remove_cv_t = typename remove_cv<T>::type;

  template<typename T>
  using add_const_t = typename add_const<T>::type;

  template<typename T>
  using add_volatile_t = typename add_volatile<T>::type;

  template<typename T>
  using add_cv_t = typename add_cv<T>::type;

  template<typename T>
  using remove_reference_t = typename remove_reference<T>::type;
} // namespace std

#endif // CAPRESE_LIBC_CXX_TYPE_TRAITS_
