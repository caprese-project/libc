#ifndef CAPRESE_LIBC_CXX_TYPEINFO_
#define CAPRESE_LIBC_CXX_TYPEINFO_

#include <internal/attribute.h>

namespace __cxxabiv1 {
  class __class_type_info;
} // namespace __cxxabiv1

namespace std {
  class type_info {
    type_info(const type_info&);
    type_info& operator=(const type_info&);

  protected:
    const char* __name;

    explicit type_info(const char* name): __name(name) { }

  public:
    virtual ~type_info();

    inline const char* name() const __noexcept {
      return __name[0] == '*' ? __name + 1 : __name;
    }

    inline bool before(const type_info& rhs) const __noexcept {
      if (__name[0] == '*' && rhs.__name[0] == '*') {
        return __name < rhs.__name;
      } else {
        return __builtin_strcmp(__name, rhs.__name) < 0;
      }
    }

    bool operator==(const type_info& rhs) const __noexcept {
      if (__name == rhs.__name) {
        return true;
      } else if (__name[0] != '*' && __builtin_strcmp(__name, rhs.__name) == 0) {
        return true;
      } else {
        return false;
      }
    }

    bool operator!=(const type_info& rhs) const __noexcept {
      return !(*this == rhs);
    }

    virtual bool __is_pointer_p() const;
    virtual bool __is_function_p() const;
    virtual bool __do_catch(const type_info* thrown_type, void** thrown_object, unsigned outer) const;
    virtual bool __do_upcast(const __cxxabiv1::__class_type_info* dst_type, void** obj_ptr) const;
    virtual bool __do_catch(const type_info* thrown_type, void** thrown_object, unsigned outer) const;
    virtual bool __do_upcast(const __cxxabiv1::__class_type_info* dst_type, void** obj_ptr) const;
  };
} // namespace std

#endif // CAPRESE_LIBC_CXX_TYPEINFO_
